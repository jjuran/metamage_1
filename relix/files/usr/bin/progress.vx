#!/usr/bin/vx -Z

let title = if argc > 1 then {argv[ 1 ]}

let filename = if argc > 2 then {argv[ 2 ]}

chdir "/gui/new/port"

let LF = "\n"

if title then
{
	rewrite "title" <== title LF
}

rewrite "procid" <== 5 LF
rewrite "size"   <== "280,76" LF

link( "/gui/new/stack", "view" )

link( "/gui/new/frame", "v/cargo/view" )
link( "/gui/new/frame", "v/label/view" )
link( "/gui/new/frame", "v/count/view" )
link( "/gui/new/frame", "v/meter/view" )

let cargo = "v/cargo/v/"
let label = "v/label/v/"
let count = "v/count/v/"
let meter = "v/meter/v/"

rewrite cargo "height" <== 18 LF

rewrite cargo ".margin-top"  <==  8 LF
rewrite cargo ".margin-left" <== 10 LF

link( "/gui/new/caption", cargo "view" )

if filename then
{
	rewrite cargo "v/text" <== "File:    " filename
}

rewrite label "height" <==  18 LF
rewrite label "width"  <== 200 LF

rewrite label ".margin-top"  <== 30 LF
rewrite label ".margin-left" <== 10 LF

link( "/gui/new/caption", label "view" )

rewrite label "v/text" <== "Remaining:"

rewrite count "height" <== 18 LF

rewrite count ".margin-top"  <==  30 LF
rewrite count ".margin-left" <== 210 LF

link( "/gui/new/caption", count "view" )

rewrite meter "height" <== 11 LF

rewrite meter ".margin-left"   <== 10 LF
rewrite meter ".margin-right"  <== 10 LF
rewrite meter ".margin-bottom" <== 10 LF

link( "/gui/new/progress", meter "view" )

touch "window"

rewrite "w/text-font" <== 0 LF

def line_buffered (input)
{
	var buffer = ""
	
	return lambda
	{
		while true do
		{
			while var p = (begin buffer).find '\n' do
			{
				# Strip newline before returning, and don't return blanks
				
				let result = p.past
				
				buffer = (++p).rest
				
				if result then
				{
					return result
				}
			}
			
			buffer .= (input.read 64 or return ())  # 64 is overkill, really
		}
	}
}

def report_remaining (numer, denom)
{
	let remaining_bytes = denom - numer
	
	var remaining = remaining_bytes
	var units     = " bytes"
	
	if remaining > 9999 then
	{
		remaining = remaining div 1024
		
		units = " K"
	}
	
	rewrite count "v/text" <== remaining units
}

var last_update_clock = 0
var last_update_value = 0

for line in receiver line_buffered IN do
{
	let clock = utime()
	let stale = clock - last_update_clock >= 100000  # 100ms
	
	var value = line
	
	if '%' in value then
	{
		value = int [value / '%'][0] * 100
	}
	else if '/' in value then 
	{
		let (numer, denom) = *([value / '/'] map int)
		
		value = numer * 10000 div denom
		
		if value != last_update_value and (stale or value == 10000) then
		{
			report_remaining (numer, denom)
		}
	}
	
	if value != last_update_value and (stale or value == 10000) then
	{
		last_update_clock = clock
		last_update_value = value
		
		rewrite meter "v/value" <== value LF
	}
}

end.
