# This script is invoked explicitly with minivx by the application.

let screen_fb_file = "screen.skif"
let cursor_fb_file = "cursor.skif"
let works_dir_path = argv[ 1 ]
let events_fd_slot = argv[ 2 ]

let has_cursor = bool getenv "AMS_CURSOR"

setenv( "GRAPHICS_UPDATE_SIGNAL_FIFO", works_dir_path "/update-signal.fifo" )

let ams_bin = "../xv68k"
let ams_lib = "../xv68k"
let ams_mnt = "../Resources/Files"

let config_txt = "../Resources/config.txt"

def comma-terminated (line)
{
	let c = line[ line.length - 1 ]
	
	return line ("," * not c in ":[" )
}

let config_lines = (load config_txt).lines() ver bool map comma-terminated

let config = str^(eval "[" join( "\n", *config_lines, "]" ))

let app_name = config[ "name" ]

def active (feature)
{
	return feature in config and config[ feature ]
}

def exists (path)
{
	return try {stat path; true} catch {false}
}

let root_dir = ams_mnt

def freemountd_rw (root) { "./freemountd -qu --rw --root" / ' ', root, "//" }

let freemountd-server = "./freemountd -qu --root" / ' ', root_dir, "//"

# Reserve fds 6 and 7
dup2(ERR, 6)
dup2(ERR, 7)

var opened_fds = []

def alloc_fd ()
{
	let fd = reader "/dev/null"
	
	opened_fds <-- fd
	
	return str fd
}

var sound-server = ()

def get_sound_fd
{
	if not active "sound" then
	{
		return ()
	}

	if let sound_fd = getenv "AMS_SOUND_FD" then
	{
		return sound_fd
	}
	else if exists "./sndtrack" then
	{
		let sound_fd_slot = alloc_fd()
		
		sound-server = "--fd", sound_fd_slot, "./sndtrack", "//"
		
		return sound_fd_slot
	}
	
	return ()
}

let sound_opt = if let sound_fd = get_sound_fd() then
{
	"--sound-fd=" sound_fd,
}

def make_shared_dir_server (key, subpath)
{
	var path = active key or return ()
	
	if not '/' in path then
	{
		let home = getenv "HOME"
		
		let dir_path = home "/" subpath "/Advanced Mac Substitute"
		
		path = dir_path "/" path
		
		run [ "mkdir", "-p", path ]
	}
	
	let fd_slot = alloc_fd()
	
	return "--fd", fd_slot, freemountd_rw path
}

let appfs-server = make_shared_dir_server ("appfs", "Library/Preferences")
let docfs-server = make_shared_dir_server ("docfs", "Documents")

let appfs_opt = if appfs-server then { "--appfs-fd", [appfs-server][ 1 ] }
let docfs_opt = if docfs-server then { "--docfs-fd", [docfs-server][ 1 ] }

let model_opt = if "cpu" in config then {"-M" config[ "cpu" ]}  # may be ()

let mem_opt = if "mem" in config then {"--mem=" config[ "mem" ]}  # may be ()

let xv = active "xv" or ""

assert xv in ["", "none", "fake", "real"]

let xv_opt = if xv then {"--xv=" xv}

def core_opts
{
	var opts = [ "--events-fd=" events_fd_slot ]
	
	if "auto-clear" in config and config[ "auto-clear" ] then
	{
		opts <-- "-0"
	}
	
	if "auto-vsync" in config and config[ "auto-vsync" ] then
	{
		opts <-- "-Y"
	}
	
	if "gne-ticks" in config then
	{
		opts <-- "-G" config[ "gne-ticks" ]
	}
	
	if "romgen" in config then
	{
		opts <-- "-R" config[ "romgen" ]
	}
	
	if "system" in config then
	{
		opts <-- "-V" config[ "system" ]
	}
	
	return ams-core: opts
}

def fs_opts
{
	let disk_opt =
	if "disk" in config then
	{
		"--disk", config[ "disk" ],
	}
	else if "disks" in config then
	{
		let disks = config[ "disks" ]
		
		*(disks map {"--disk", v}),
	}
	
	let opts = disk_opt, appfs_opt, docfs_opt
	
	return
	if opts then
	{
		ams-fs: [ opts ],
	}
}

def just_the_name (path)
{
	return
	if '/' in path
	then { -(begin -path).find('/').past }
	else { path }
}

def seg_opts
{
	let open_opt =
	if let open = getenv "AMS_OPEN" then
	{
		assert open[ 4 ] == ':'
		
		"--type", open[ 0 -> 4], "--open", just_the_name substr( open, 5 ),
	}
	
	let opts = [ open_opt ]
	
	return
	if opts then
	{
		ams-seg: opts,
	}
}

def ui_opts
{
	let live_modal_opt =
	if "live-modal" in config then
	{
		"--live-modal",
	}
	
	let opts = [ live_modal_opt ]
	
	return
	if opts then
	{
		ams-ui: opts,
	}
}

let module_args = str^
[
	core_opts(),
	fs_opts(),
	seg_opts(),
	ui_opts(),
]

def argify (name)
{
	let path = ams_lib "/" name
	
	return
		if name in module_args
			then {"[", path, *module_args[ name ], "]"}
			else {path}
}

let prefix_list = "core io fs snd rsrc drvr pack seg qd ui print dsat"
var ams_modules = [ prefix_list / ' ' ] map {"ams-" v}

ams_modules <-- "umsp"

let module_opts = ams_modules map {"-m", argify v}

let app = ams_bin "/app"

let servers = sound-server, freemountd-server, appfs-server, docfs-server

let xv68k_opts = model_opt, mem_opt, sound_opt, xv_opt, "-tSP"

let xv68k-screen = "--raster=" works_dir_path "/" screen_fb_file
let xv68k-cursor = "--cursor=" works_dir_path "/" cursor_fb_file (*) has_cursor

let xv68k-subcmd = "./xv68k", xv68k_opts, xv68k-screen, xv68k-cursor, *module_opts, app, app_name
let graft-subcmd = "./graft", servers, xv68k-subcmd

let command = [ graft-subcmd ]

execvp( command[ 0 ], command )
