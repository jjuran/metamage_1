# This script is invoked explicitly with minivx by the application.

const screen_fb_file = "screen.skif"
const works_dir_path = argv[ 1 ]
const events_fd_slot = argv[ 2 ]

setenv( "GRAPHICS_UPDATE_SIGNAL_FIFO", works_dir_path "/update-signal.fifo" )

const ams_bin = "../xv68k"
const ams_lib = "../xv68k"
const ams_mnt = "../Resources/Files"

const config_txt = "../Resources/config.txt"

def comma-terminated (line)
{
	const c = line[ line.length - 1 ]
	
	return line ("," * not c in ":[" )
}

const config_lines = (load config_txt).lines() ver bool map comma-terminated

const config = str^(eval "[" join( "\n", *config_lines, "]" ))

const app_name = config[ "name" ]

def active (feature)
{
	return feature in config and config[ feature ]
}

def exists (path)
{
	return try {stat path; true} catch {false}
}

const root_dir = ams_mnt

def freemountd_rw (root) { "./freemountd -qu --rw --root" / ' ', root, "//" }

const freemountd-server = "./freemountd -qu --root" / ' ', root_dir, "//"

# Reserve fds 6 and 7
dup2(ERR, 6)
dup2(ERR, 7)

var sound-fd
var sound-server = ()

def get_sound_fd
{
	if active "sound" and exists "./sndtrack" then
	{
		const sound_fd_slot = str (sound-fd = reader "/dev/null")
		sound-server = "--fd", sound_fd_slot, "./sndtrack", "//"
		
		return sound_fd_slot
	}
	
	return ()
}

var appfs-fd
var appfs-server = ()

def get_appfs_fd
{
	var appfs = active "appfs" or return ()
	
	if appfs isa bool or appfs == "-" then
	{
		const home = getenv "HOME"
		
		const osx_prefs = home "/Library/Preferences"
		const ams_prefs = osx_prefs "/Advanced Mac Substitute"
		
		appfs = ams_prefs "/" app_name
		
		run [ "mkdir", "-p", appfs ]
	}
	
	const fd_slot = str (appfs-fd = reader "/dev/null")
	appfs-server = "--fd", fd_slot, freemountd_rw appfs
	
	return fd_slot
}

var docfs-fd
var docfs-server = ()

def get_docfs_fd
{
	var docfs = active "docfs" or return ()
	
	if docfs isa bool then
	{
		docfs = "-"
	}
	
	if not '/' in docfs then
	{
		const home = getenv "HOME"
		
		const osx_docs = home "/Documents"
		const ams_docs = osx_docs "/Advanced Mac Substitute"
		
		const name = if docfs == "-" then {app_name} else {docfs}
		
		docfs = ams_docs "/" name
		
		run [ "mkdir", "-p", docfs ]
	}
	
	const fd_slot = str (docfs-fd = reader "/dev/null")
	docfs-server = "--fd", fd_slot, freemountd_rw docfs
	
	return fd_slot
}

const model_opt = if "cpu" in config then {"-M" config[ "cpu" ]}  # may be ()

def core_opts
{
	var opts = [ "--events-fd=" events_fd_slot ]
	
	if "auto-clear" in config and config[ "auto-clear" ] then
	{
		opts <-- "-0"
	}
	
	if "auto-vsync" in config and config[ "auto-vsync" ] then
	{
		opts <-- "-Y"
	}
	
	if "gne-ticks" in config then
	{
		opts <-- "-G" config[ "gne-ticks" ]
	}
	
	if "romgen" in config then
	{
		opts <-- "-R" config[ "romgen" ]
	}
	
	if "system" in config then
	{
		opts <-- "-V" config[ "system" ]
	}
	
	return ams-core: opts
}

def io_opts
{
	return
	if const sound_fd = get_sound_fd() then
	{
		setenv( "XV68K_SOUND_FD", sound_fd )
		
		ams-io: [ "--sound-fd=" sound_fd ],
	}
}

def fs_opts
{
	const disk_opt =
	if "disk" in config then
	{
		"--disk", config[ "disk" ],
	}
	
	const appfs_opt =
	if const appfs_fd = get_appfs_fd() then
	{
		"--appfs-fd", appfs_fd,
	}
	
	const docfs_opt =
	if const docfs_fd = get_docfs_fd() then
	{
		"--docfs-fd", docfs_fd,
	}
	
	const opts = disk_opt, appfs_opt, docfs_opt
	
	return
	if opts then
	{
		ams-fs: [ opts ],
	}
}

def just_the_name (path)
{
	return
	if '/' in path
	then { -(begin -path).find('/').past }
	else { path }
}

def seg_opts
{
	const open_opt =
	if const open = getenv "AMS_OPEN" then
	{
		assert open[ 4 ] == ':'
		
		"--type", open[ 0 -> 4], "--open", just_the_name substr( open, 5 ),
	}
	
	const opts = [ open_opt ]
	
	return
	if opts then
	{
		ams-seg: opts,
	}
}

const module_args = str^
[
	core_opts(),
	fs_opts(),
	io_opts(),
	seg_opts(),
]

def argify (name)
{
	const path = ams_lib "/" name
	
	return
		if name in module_args
			then {"[", path, *module_args[ name ], "]"}
			else {path}
}

const prefix_list = "core io fs snd rsrc pack seg qd ui print"
var   ams_modules = [ prefix_list / ' ' ] map {"ams-" v}

ams_modules <-- "umsp"

const module_opts = ams_modules map {"-m", argify v}

const app = ams_bin "/app"

const servers = sound-server, freemountd-server, appfs-server, docfs-server

const xv68k_opts = model_opt, "-tSP"

const xv68k-screen = "--raster=" works_dir_path "/" screen_fb_file

const xv68k-subcmd = "./xv68k", xv68k_opts, xv68k-screen, *module_opts, app, app_name
const graft-subcmd = "./graft", servers, xv68k-subcmd

const command = [ graft-subcmd ]

execvp( command[ 0 ], command )
