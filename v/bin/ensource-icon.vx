#!/usr/bin/env vx

def bitstrings { _ map { v "0", v "1" } }

const binary-strings = bitstrings^8 [ "" ]

def binarize
{
	const data = _
	
	const bits = data map { *binary-strings[ int v ] }
	
	return str bits
}

def lineate
{
	var bits = _
	
	translate( &bits, "01", " X" )
	
	return "|" join( " ", *bits ) "|\n"
}

const data = packed load argv[ 1 ]

assert data.size in [ 128, 256 ]

const icons = [data / -128]

for icon in icons do
{
	const rows = [icon / -4] map lineate * binarize
	
	const source = str rows
	
	print source
}
