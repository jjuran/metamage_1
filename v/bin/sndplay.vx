#!/usr/bin/env minivx

if argc < 2 then
{
	warn "usage: sndplay tonegraph | sndtrack"
	exit 1
}

let tonegraph = eval load argv[ 1 ]

def connect_output()
{
	if let sndpipe_fd = getenv "SNDPIPE_FD" then
	{
		return fd int sndpipe_fd
	}
	
	if isatty OUT then
	{
		warn "sndplay: Pipe output to sndtrack, please"
		exit 1
	}
	
	return OUT
}

let output_fd = connect_output()

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../lib/v/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let sndpipe = import "sndpipe"

let sound = sndpipe.player { output_fd <== _ }

let triangle = do
{
	let tooth = 1 -> 128 map {byte (2 * v)} per packed
	
	packed (tooth x"FF" -tooth x"01") => 64,
}

def play (score, wave=triangle)
{
	sound.four_tone (32767, [ (0: wave) (*) 4 ])
	
	for chord in score do
	{
		let duration = chord.key / 8
		let notes    = chord.value map { v => wave }
		
		sound.tone_update (32767, notes)
		
		sleep duration
	}
	
	sound.stop()
}

play tonegraph

end.
