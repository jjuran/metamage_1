#!/usr/bin/env minivx

if argc < 2 then
{
	warn "usage: sndplay tonegraph | sndtrack"
	exit 1
}

const tonegraph = eval load argv[ 1 ]

def connect_output()
{
	if const sndpipe_fd = getenv "SNDPIPE_FD" then
	{
		return fd int sndpipe_fd
	}
	
	if isatty OUT then
	{
		warn "sndplay: Pipe output to sndtrack, please"
		exit 1
	}
	
	return OUT
}

const output_fd = connect_output()

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../lib/v/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const sndpipe = import "sndpipe"

const sound = sndpipe.player { output_fd <== _ }

const triangle = do
{
	const tooth = 1 -> 128 map {byte (2 * v)} per packed
	
	packed (tooth x"FF" -tooth x"01") => 64,
}

def play (score, wave=triangle)
{
	sound.four_tone (32767, [ (0: wave) (*) 4 ])
	
	for chord in score do
	{
		const duration = chord.key / 8
		const notes    = chord.value map { v => wave }
		
		sound.tone_update (32767, notes)
		
		sleep duration
	}
	
	sound.stop()
}

play tonegraph

end.
