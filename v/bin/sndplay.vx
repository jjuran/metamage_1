#!/usr/bin/env lvx

if argc < 2 then
{
	warn "usage: sndplay tonegraph | sndtrack"
	exit 1
}

let tonegraph = eval (load, realpath) argv[ 1 ]

def connect_output()
{
	if let sndpipe_fd = getenv "SNDPIPE_FD" then
	{
		return fd int sndpipe_fd
	}
	
	if isatty OUT then
	{
		warn "sndplay: Pipe output to sndtrack, please"
		exit 1
	}
	
	return OUT
}

let output_fd = connect_output()

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../lib/v/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let sndpipe = import "sndpipe"

let sound = sndpipe.player ({ output_fd <== _ }, output_fd.read)

def normalize (wave)
{
	let w = wave.key
	let i = wave.value
	
	return w[ i -> 256 ] w[ 0 -> i ] => 0
}

def blend (waves)
{
	let weight = waves map .key per Math.sum
	
	let samples = 0 -> 256 map
	{
		let i = v
		
		byte ((waves map { v.key * (u8 v.value.key[i] - 128) }
		             per Math.sum)
		      div weight + 128),
	}
	
	return packed samples => 0
}

let triangle = do
{
	let tooth = 1 -> 128 map {byte (2 * v)} per packed
	
	packed (tooth x"FF" -tooth x"01") => 64,
}

let root = normalize triangle

let root_x2 = mince root.key    * 2 => 0
let root_x4 = mince root_x2.key * 2 => 0

let organ = blend [5: root, 2: root_x2, 1: root_x4]

def play (score, wave=organ)
{
	sound.four_tone (32767, [ (0: wave) (*) 4 ])
	
	for chord in score do
	{
		let duration = chord.key / 8
		let notes    = chord.value map { v => wave }
		
		sound.tone_update (32767, notes)
		
		sleep duration
	}
	
	sound.stop()
}

play tonegraph

end.
