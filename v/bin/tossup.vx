#!/usr/bin/env vx

# "Tossup" is the process of choosing one player over another for some
# perquisite (typically, the privilege of making the first move in a game) --
# which is itself a kind of mini-game (and necessarily zero-sum).

# This program implements a trustless, symmetric tossup protocol.
# Trustlessness means that neither player need trust the other to play fairly
# nor a referee to rule impartially.  (In fact, there is no referee at all.)
# Symmetry allows the protocol to be executed by both players following the
# same script (in contrast to asymmetrical protocols like "I flip, you call",
# where two different roles exist and must be assigned somehow).

let isa_tty = isatty OUT
let verbose = int (isa_tty and getenv "TOSSUP_VERBOSE")

let cps = 20  # 20 characters per second for dramatic effect

let delay = +isa_tty / cps

let mention = if isa_tty then {{OUT <== _}} else {{}}
let details = if verbose then {{OUT <== _}} else {{}}

let ESC = "\x1b"
let CSI = ESC "["

let CLEAN = CSI "H" CSI "J"  # home, clear to end

let RESET = CSI "0m"
let RED   = CSI "91m"
let GREEN = CSI "92m"
let AMBER = CSI "93m"
let WHITE = CSI "97m"

mention CLEAN  # must be a separate write() call

mention WHITE "Tossup" RESET " in progress:" "\n"
        "\n"

let random-fd = reader "/dev/urandom"

let opponent-input  = fd 6
let opponent-output = fd 7

def abort
{
	if not isa_tty then
	{
		print "!"
	}
	
	warn "Tossup protocol aborted."
	exit 1
}

def read-all (error, read, n)
{
	var result = x""
	
	while n do
	{
		let piece = read n or return error result
		
		n -= piece.size
		
		result .= piece
	}
	
	return result
}

let random-bytes = read-all % abort % random-fd.read

let B = record( recv: opponent-input.read, send: { opponent-output <== _ } )

let hash-len = 32
let salt-len = 7
let mark-int = i8
let mark-len = mark-int.size

def exchange (outgoing-data)
{
	var result = x""
	
	for c in outgoing-data do
	{
		B.send packed c
		
		mention "."
		
		if delay then { sleep delay }
		
		let x = B.recv 1 or abort()
		
		mention "\x08" x
		
		result .= x
	}
	
	return result
}

def play
{
	let salt-A = random-bytes salt-len
	let mark-A = random-bytes mark-len
	
	let hash-A = sha256 salt-A mark-A
	
	mention "Outgoing mark:  " GREEN mark-A RESET "\n"
	
	details "Outgoing salt:  " salt-A "\n"
	        "Outgoing hash:  " hash-A "\n"
	
	mention "\n"
	        "Exchange hash:  "
	
	let hash-B = exchange hash-A
	
	mention "\r" "Received" "\n"
	        "Exchange salt:  "
	
	let salt-B = exchange salt-A
	
	mention "\r" "Received" "\n"
	        "Exchange mark:  " RED
	
	let mark-B = exchange mark-A
	
	mention "\r" RESET "Received" "\n"
	        "\n"
	
	let computed-hash = sha256 salt-B mark-B
	
	details "Computed hash:  " computed-hash "\n"
	
	if computed-hash == hash-B then
	{
		details "Received hash and computed hash match." "\n\n"
	}
	else
	{
		mention "Received hash and computed hash DO NOT MATCH." "\n\n"
		
		abort()
	}
	
	return mark-A, mark-B
}

let won-or-lost = [ "WON", "LOST" ]

var result

do
{
	let A, let B = play()
	
	let a = unhex "0x" hex A
	let b = unhex "0x" hex B
	
	result = mark-int (a - b)
	
	details "Marks:  " a " vs. " b "\n"
	        "Delta:  " result "\n"
	        "\n"
}
while result == mark-int -result  # ignore 0 and 2^(k-1)

let scored = won-or-lost[ +(result < 0) ]

mention "You " AMBER scored RESET ".\n\n"

if not isa_tty then
{
	print "+-"[ +(result < 0) ]
}

end.
