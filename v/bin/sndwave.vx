#!/usr/bin/env minivx

if isatty OUT then
{
	warn "sndwave: Pipe output to sndtrack, please"
	exit 1
}

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../lib/v/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const sndpipe = import "sndpipe"

const sound = sndpipe.player { OUT <== _ }

def inverted (wave)
{
	const forward = packed ('\x01' .. '\xff')
	const reverse = -forward
	
	return packed translated (wave.string, forward, reverse)
}

def make_hybrid_wave (leg_length)
{
	const leg2 = packed (byte 2 .. byte (1 + leg_length))
	const leg1 = -leg2
	const edge = x"01" * (254 - 2 * leg_length)
	
	const bottom = leg1 edge leg2
	const top    = inverted bottom
	
	return top bottom
}

def make_fading_wave (fade)
{
	const plane = x"80" * fade
	const climb = packed (byte 129 .. byte (255 - fade))
	const angle = plane climb
	
	const demiwave = angle -angle
	
	return demiwave inverted demiwave
}

const playrate       = 2
const playrate_fixed = 2^16 * playrate

const hybrid = 0 .. 126 map make_hybrid_wave per packed
const fading = 1 .. 126 map make_fading_wave per packed

const n_leftover   = hybrid.size mod (370 / playrate)
const aligned_size = hybrid.size - n_leftover

const leftover = hybrid[ aligned_size -> hybrid.size ]

sound.free_form (playrate_fixed, hybrid[ 0 -> aligned_size ])
sound.free_form (playrate_fixed, leftover fading)

sound.detach()

end.

    ____            __
                   /  \            /\
              -->            -->  /  \      -->  _/\__  _  -->  ________
                                      \  /            \/
        ____           \__/            \/

   square wave                  triangle wave                   silence
