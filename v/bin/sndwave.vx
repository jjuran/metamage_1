#!/usr/bin/env minivx

def connect_output()
{
	if let sndpipe_fd = getenv "SNDPIPE_FD" then
	{
		return fd int sndpipe_fd
	}
	
	if isatty OUT then
	{
		warn "sndwave: Pipe output to sndtrack, please"
		exit 1
	}
	
	return OUT
}

let output_fd = connect_output()

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../lib/v/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let sndpipe = import "sndpipe"

let sound = sndpipe.player { output_fd <== _ }

def inverted (wave)
{
	let forward = packed ('\x01' .. '\xff')
	let reverse = -forward
	
	return packed translated (wave.string, forward, reverse)
}

def make_hybrid_wave (leg_length)
{
	let leg2 = packed (byte 2 .. byte (1 + leg_length))
	let leg1 = -leg2
	let edge = x"01" * (254 - 2 * leg_length)
	
	let bottom = leg1 edge leg2
	let top    = inverted bottom
	
	return top bottom
}

def make_fading_wave (fade)
{
	let plane = x"80" * fade
	let climb = packed (byte 129 .. byte (255 - fade))
	let angle = plane climb
	
	let demiwave = angle -angle
	
	return demiwave inverted demiwave
}

let playrate       = 2
let playrate_fixed = 2^16 * playrate

let hybrid = 0 .. 126 map make_hybrid_wave per packed
let fading = 1 .. 126 map make_fading_wave per packed

let n_leftover   = hybrid.size mod (370 / playrate)
let aligned_size = hybrid.size - n_leftover

let leftover = hybrid[ aligned_size -> hybrid.size ]

sound.free_form (playrate_fixed, hybrid[ 0 -> aligned_size ])
sound.free_form (playrate_fixed, leftover fading)

sound.detach()

end.

    ____            __
                   /  \            /\
              -->            -->  /  \      -->  _/\__  _  -->  ________
                                      \  /            \/
        ____           \__/            \/

   square wave                  triangle wave                   silence
