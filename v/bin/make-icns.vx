#!/usr/bin/env minivx

let icon_types = str^
[
	# 'ICON' elements aren't supported in 'icns', but we document the
	# format here anyway for completeness.

#	"32x32,1" => 'ICON',
	
	# .icon
	
	"32x32,1+1" => 'ICN#',
	
	# System 7
	
	"16x16,1+1" => 'ics#',
	"16x12,1+1" => 'icm#',
	
	"16x12,4" => 'icm4',
	"16x12,8" => 'icm8',
	"16x16,4" => 'ics4',
	"16x16,8" => 'ics8',
	"32x32,4" => 'icl4',
	"32x32,8" => 'icl8',
	
	# Mac OS 8.5
	
	"48x48,+1" => 'ich#',
	
	"48x48,4" => 'ich4',
	"48x48,8" => 'ich8',
	
	"16x16,24" => 'is32',
	"16x16,+8" => 's8mk',
	"32x32,24" => 'il32',
	"32x32,+8" => 'l8mk',
	"48x48,24" => 'ih32',
	"48x48,+8" => 'h8mk',
	
	# Mac OS X 10.0
	
	"128x128,24" => 'it32',
	"128x128,+8" => 't8mk',
	
	# .png
	
	# Mac OS X 10.5
	
	"256x256" => 'ic08',
	"512x512" => 'ic09',
	
	# Mac OS X 10.7
	
	"16x16" => 'icp4',
	"32x32" => 'icp5',
	"64x64" => 'icp6',
	"128x128" => 'ic07',
	"1024x1024" => 'ic10',
	
	# OS X 10.8
	
	"512x512@2x" => 'ic10',
	"16x16@2x"   => 'ic11',
	"32x32@2x"   => 'ic12',
	"128x128@2x" => 'ic13',
	"256x256@2x" => 'ic14',
]

def icon_type_of (name)
{
	try
	{
		return icon_types[ name ]
	}
	catch
	{
		throw name " is not a recognized icon type"
	}
}

def pack_one
{
	let tag  = packed _.key
	let data = packed _.value
	
	let size = (big-endian u32).encode (data.size + 8)
	
	return tag size data
}

def icon_type_from_filename (name)
{
	let r0 = begin -name
	
	var r1 = r0.find '.'
	
	if r1 then
	{
		let ext = -r1.past
		
		if ext.length == 4 and mb32 ext in icon_types.values then
		{
			return mb32 ext
		}
		
		++r1
		
		name = -r1.rest
	}
	else
	{
		r1 = r0
	}
	
	if var r2 = r1.find '-' then
	{
		name = -(r2 - r1)
	}
	
	return icon_type_of name
}

assert icon_type_from_filename "foo.icl8" == 'icl8'
assert icon_type_from_filename "512x512@2x.ic10" == 'ic10'
assert icon_type_from_filename "512x512@2x.icon" == 'ic10'
assert icon_type_from_filename "foo-32x32,1+1.ICN#" == 'ICN#'
assert icon_type_from_filename "foo-32x32,1+1.icon" == 'ICN#'
assert icon_type_from_filename "foo-32x32,1+1" == 'ICN#'
assert icon_type_from_filename "32x32,1+1" == 'ICN#'

def basename (path)
{
	if let p = (begin -path).find '/' then
	{
		return -p.past
	}
	
	return path
}

assert basename "/foo/bar" == "bar"
assert basename "foo/bar" == "bar"
assert basename "/bar" == "bar"
assert basename "bar" == "bar"

def pack_icon_file (path)
{
	let data = load path
	
	if data[ 0 -> 4 ] == "icns" then
	{
		let size = (big-endian u32).decode data[ 4 -> 8 ]
		
		assert size > 8
		
		return data[ 8 -> size ]
	}
	
	let icon_type = icon_type_from_filename basename path
	
	return pack_one( icon_type => data )
}

if let icons = argv[ 1 -> argc ] map pack_icon_file then
{
	OUT <== pack_one( icns: icons )
	
	exit 0
}

warn "usage: make-icns <icon-file> ... > out.icns"
exit 2
