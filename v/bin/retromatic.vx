#!/usr/bin/env minivx -Z

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../lib/"

def import { const path = libdir _ ".vsl"; eval( load path, path ) }

const basename = import "basename";

const info_plist = import "info_plist"
const render_xml = import "render_xml"

def comma-terminated (line)
{
	const c = line[ line.length - 1 ]
	
	return line ("," * not c in ":[" )
}

def exists (path)
{
	return try {stat path; true} catch {false}
}

def mkdir-p
{
	run [ "mkdir", "-p", _ ]
}

def copy
{
	run [ "cp", "-pR", _ ]
}

def vx_Z (script_filename) { "minivx", "-Z", bindir "/" script_filename }

def choose_frontend
{
	const is_arm64 = output-from-run [ "arch" ] == "arm64\n"
	const frontend = if is_arm64 then {"Amethyst"} else {"Amphitheatre"}
	
	if const retro_frontend = getenv "RETRO_FRONTEND" then
	{
		if retro_frontend != frontend then
		{
			warn "retromatic: "
			     "Using " retro_frontend " as front end "
			     "instead of default " frontend
		}
		
		return retro_frontend
	}
	
	return frontend
}

const frontend = choose_frontend()

const output_dir = argv[ 1 ]
const input_path = argv[ 2 ]

const parent_dir = dirname input_path

const src_is_txt = -substr( -input_path, 0, 4 ) == ".txt"

const config_data = if src_is_txt then {load input_path} else {""}

const config_lines = config_data.lines() ver bool map comma-terminated

const config = str^(eval "[" join( "\n", *config_lines, "]" ))

def active (feature)
{
	return feature in config and config[ feature ]
}

const named = "name" in config

var name = if src_is_txt then {config[ "name" ]} else {basename input_path}

# This path may not actually exist in the case of a disk image.
# Really it's just the fs root path and the app name joined by "/".

var name_path = parent_dir "/" name

var new_disk = ""

const disk

if "disk" in config then
{
	disk = config[ "disk" ]
}
else if src_is_txt and not exists name_path and exists name_path ".mbin" then
{
	disk = name ".mbin"
	
	new_disk = ("disk: " rep disk) "\n"
}
else if -substr( -name, 0, 5 ) == ".mbin" then
{
	disk = name
	name = (output-from-run [ "var/out/mbin", "name", input_path ]).lines()[ 0 ]
	
	name_path = parent_dir "/" name
	
	new_disk = ("disk: " rep disk) "\n"
}
else
{
	disk = null
}

const name_to_copy

if disk then
{
	name_to_copy = disk
	
	setenv( "AMS_DISK", name_to_copy )
}
else
{
	name_to_copy = name
}

const new_app_dir = output_dir "/" name ".app"
const contents = new_app_dir "/Contents"

const MacOS_dir = contents "/MacOS"
const Resources = contents "/Resources"
const xv68k_dir = contents "/xv68k"

const Files = Resources "/Files"

mkdir-p (MacOS_dir, Files "/AMS Resources", xv68k_dir)

def ams-get-app (property, args: ...)
{
	const path = name_path
	
	return packed output-from-run [ vx_Z "ams-get.vx", property, path, args ]
}

def icns (icon)
{
	assert icon.size == 256
	
	return packed ('icns', x"00000110", 'ICN#', x"00000108", icon)
}

const creator = mb32 ams-get-app "bndl-owner"
const icon    = icns ams-get-app ("bndl-icon", "APPL")

rewrite Resources "/" name ".icns" <== icon

const resfiles = [ "AMS Resources", "System" ]
const respaths = resfiles map { parent_dir "/" v } ver { exists v "/r" }

run [ vx_Z "mkrsrc.vx", "-o", Files "/AMS Resources/rsrc", *respaths ]

copy( parent_dir "/" name_to_copy, Files "/" name_to_copy )

if "files" in config then
{
	const files = config[ "files" ] map { parent_dir "/" v }
	
	copy( *files, Files )
}

const ams_bin = "../ams-68k-bin/bin"
const ams_lib = "../ams-68k-bin/lib"

const prefix_list = "core io fs snd rsrc pack seg qd ui print"
const ams_modules = [ prefix_list / ' ' ] map {ams_lib "/ams-" v}

copy( *ams_modules, ams_lib "/umsp", ams_bin "/app", xv68k_dir )

const new_data = ("name: " rep name) "\n" * not named

rewrite Resources "/config.txt" <== new_data new_disk config_data

const tools = "mac/libs/amicus/tools/launch-ams-app.vx"

const native_binary_names = ["minivx graft xv68k freemountd" / ' ']
const native_binary_paths = native_binary_names map {"var/out/" v}

copy( tools, *native_binary_paths, MacOS_dir )

if active "sound" and exists "var/out/sndtrack" then
{
	copy( "var/out/sndtrack", MacOS_dir )
}

copy( "var/out/" frontend, MacOS_dir )

var plist_xml_lines = [ info_plist.version, info_plist.doctype ]

def document_icons_table
{
	const table = try { config[ "document-icons" ] } catch { [] }
	
	return mb32^(table map { mb32 v.key => v.value })
}

const doctypes =
if "document-types" in config then
{
	const document-types = config[ "document-types" ]
	const document-icons = document_icons_table()
	
	const doctypes = document-types map
	{
		var name = str v.key
		
		const type_key = mb32 v.key
		
		const icon_key = if type_key in document-icons
			then { document-icons[ type_key ] }
			else {                 type_key   }
		
		const icon = icns ams-get-app ("bndl-icon", str icon_key)
		
		translate( &name, "/\0", ": " );
		
		[
			CFBundleTypeName: v.value,
			CFBundleTypeOSTypes: [ v.key ],
			
			if icon.size then
			{
				rewrite Resources "/" name ".icns" <== icon
				
				CFBundleTypeIconFile: name,
			},
		],
	}
	
	CFBundleDocumentTypes: doctypes,
}

const info =
[
	CFBundleExecutable:  frontend,
	CFBundleIconFile:    name,
	CFBundleName:        name,
	CFBundlePackageType: 'APPL',
	CFBundleSignature:   creator,
	CFBundleVersion:     "for Advanced Mac Substitute",
	CFBundleGetInfoString: "(using the " frontend " front end)",
	NSHighResolutionCapable: true,
	
	doctypes,
]

def printer (depth, text)
{
	const Tab = "\t"
	
	const tabs = Tab * depth
	
	plist_xml_lines <-- tabs text
}

render_xml( printer, info_plist.convert info )

const plist = "\n".join( *plist_xml_lines, "" )

rewrite contents "/Info.plist" <== plist
