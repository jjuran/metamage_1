#!/usr/bin/env minivx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let basename = import "basename";

let info_plist = import "info_plist"
let render_xml = import "render_xml"

let var_bin = "var/bin"

def comma-separated (prev, next)
{
	let c = prev[ prev.length - 1 ]
	
	return prev ("," * not c in ":[" ) "\n" next
}

def exists (path)
{
	return try {stat path; true} catch {false}
}

def mkdir-p
{
	run [ "mkdir", "-p", _ ]
}

def copy
{
	run [ "cp", "-fpR", _ ]
}

def vx_run (script_filename) { "minivx", bindir "/" script_filename }

def choose_frontend
{
	let is_arm64 = output-from-run [ "arch" ] == "arm64\n"
	let frontend = if is_arm64 then {"Amethyst"} else {"Amphitheatre"}
	
	if let retro_frontend = getenv "RETRO_FRONTEND" then
	{
		if retro_frontend != frontend then
		{
			warn "retromatic: "
			     "Using " retro_frontend " as front end "
			     "instead of default " frontend
		}
		
		return retro_frontend
	}
	
	return frontend
}

let frontend = choose_frontend()

let output_dir = argv[ 1 ]
let input_path = argv[ 2 ]

if not exists input_path then
{
	warn "retromatic.vx: " input_path ": No such file or directory"
	
	exit 1
}

var parent_dir = dirname input_path

let src_is_txt = -substr( -input_path, 0, 4 ) == ".txt"

if src_is_txt and exists parent_dir "/../mnt" then
{
	parent_dir .= "/../mnt"
}

let config_data = if src_is_txt then {load input_path} else {""}

let config_lines = config_data.lines() ver bool per comma-separated or "()"

var config = str^[eval( config_lines, realpath input_path )]

def active (feature)
{
	return feature in config and config[ feature ]
}

def config_txt
{
	return config map { v.key ": " (rep v.value) '\n' } per str
}

let named = "name" in config

if src_is_txt and not named then
{
	warn "retromatic.vx: " input_path ": Required field 'name' is missing"
	
	exit 1
}

var name = if src_is_txt then {config[ "name" ]} else {basename input_path}

# This path may not actually exist in the case of a disk image.
# Really it's just the fs root path and the app name joined by "/".

var name_path = parent_dir "/" name

var new_disk = ""

var disk = null
var disks = []

var files_to_copy = []

let extensions = [ ".mbin", ".mbim" ]

def auto_mbin_disk (name)
{
	let path = parent_dir "/" name
	
	if not exists path then
	{
		for ext in extensions do
		{
			if exists path ext then
			{
				return name ext
			}
		}
	}
	
	return ()
}

def drop (x)
{
	return lambda (s) { string (s / x) }
}

def repl (x)
{
	return lambda (s) { translated (s, x / 2) }
}

let mutations =
[
	drop '\'',
	drop "\u2019",  # typographer's apostrophe / closing single quote
	drop '.',
	repl " -",
	repl str ('A' .. 'Z', 'a' .. 'z'),
]

def auto_disk_name (app_name)
{
	var disk_name
	
	if disk_name = auto_mbin_disk app_name then
	{
		return disk_name
	}
	
	let name = mutations per app_name>-{ v L }
	
	if name != app_name and (disk_name = auto_mbin_disk name) then
	{
		return disk_name
	}
	
	return ()
}

if "disk" in config then
{
	disk = config[ "disk" ]
}
else if "disks" in config then
{
	disks = config[ "disks" ]
}
else if src_is_txt and not exists name_path then
{
	disk = auto_disk_name name
	
	if not disk then
	{
		warn "retromatic.vx: " name ": not found"
		
		exit 1
	}
	
	new_disk = ("disk: " rep disk) "\n"
}
else if -substr( -name, 0, 5 ) == ".mbin" then
{
	disk = name
	name = (output-from-run [ var_bin "/mbin", "name", input_path ]).lines()[ 0 ]
	
	name_path = parent_dir "/" name
	
	new_disk = ("disk: " rep disk) "\n"
}

if disk then
{
	files_to_copy = [disk]
	
	setenv( "AMS_DISK", disk )
}
else if disks then
{
	files_to_copy = disks
	
	setenv( "AMS_DISK", disks[ 0 ] )
}
else
{
	files_to_copy = [name]
}

let new_app_dir = output_dir "/" name ".app"
let contents = new_app_dir "/Contents"

let MacOS_dir = contents "/MacOS"
let Resources = contents "/Resources"
let xv68k_dir = contents "/xv68k"

let Files = Resources "/Files"

mkdir-p (MacOS_dir, Files "/AMS Resources", xv68k_dir)

def ams-get-app (property, args: ...)
{
	let path = name_path
	
	return packed output-from-run [ vx_run "ams-get.vx", property, path, args ]
}

def icns (icon)
{
	if icon.size == 0 then
	{
		return x""
	}
	
	assert icon.size == 256
	
	return packed ('icns', x"00000110", 'ICN#', x"00000108", icon)
}

let creator = ???
let icon    = ???

try
{
	creator = mb32 ams-get-app "bndl-owner"
	icon    = icns ams-get-app ("bndl-icon", "APPL")
}
catch
{
	creator = '????'
	icon    = null
}

if icon then
{
	rewrite Resources "/APPL.icns" <== icon
}

let resfiles = [ "AMS Resources", "System" ]
let respaths = resfiles map { parent_dir "/" v } ver { exists v "/r" }

run [ vx_run "mkrsrc.vx", "-o", Files "/AMS Resources/rsrc", *respaths ]

if "docfs" in config then
{
	let docfs = config[ "docfs" ]
	
	if docfs isa bool and docfs or docfs == "-" then
	{
		config[ "docfs" ] = name
	}
}

if "files" in config then
{
	files_to_copy <-- *config[ "files" ]
}

let paths_to_copy = files_to_copy map { parent_dir "/" v }

copy( *paths_to_copy, Files )

let ams_bin = "../ams-68k-bin/bin"
let ams_lib = "../ams-68k-bin/lib"

let prefix_list = "core io fs snd rsrc pack seg qd ui print dsat"
let ams_modules = [ prefix_list / ' ' ] map {ams_lib "/ams-" v}

copy( *ams_modules, ams_lib "/umsp", ams_bin "/app", xv68k_dir )

let new_data = ("name: " rep name) "\n" * not named

rewrite Resources "/config.txt" <== new_data new_disk config_txt()

let tools = "graphics/frontend-common/tools/launch-ams-app.vx"

let native_binary_names = ["minivx graft xv68k freemountd" / ' ']
let native_binary_paths = native_binary_names map {var_bin "/" v}

copy( tools, *native_binary_paths, MacOS_dir )

if active "sound" and exists var_bin "/sndtrack" then
{
	copy( var_bin "/sndtrack", MacOS_dir )
}

if frontend != "Amber" and exists var_bin "/Amber" then
{
	copy( var_bin "/Amber", MacOS_dir )
}

copy( var_bin "/" frontend, MacOS_dir "/" name )

var plist_xml_lines = [ info_plist.version, info_plist.doctype ]

def document_icons_table
{
	let table = try { config[ "document-icons" ] } catch { [] }
	
	return mb32^(table map { mb32 v.key => v.value })
}

let doctypes =
if "document-types" in config then
{
	let document-types = config[ "document-types" ]
	let document-icons = document_icons_table()
	
	let doctypes = document-types map
	{
		let name = translated( str v.key, "/\0", ": " );
		
		let type_key = mb32 v.key
		
		let icon_key = if type_key in document-icons
			then { document-icons[ type_key ] }
			else {                 type_key   }
		
		let icon = icns ams-get-app ("bndl-icon", str icon_key)
		
		[
			CFBundleTypeName: v.value,
			CFBundleTypeOSTypes: [ v.key ],
			
			if icon.size then
			{
				rewrite Resources "/" name ".icns" <== icon
				
				CFBundleTypeIconFile: name,
			},
		],
	}
	
	CFBundleDocumentTypes: doctypes,
}

let info =
[
	CFBundleExecutable:  name,
	CFBundleName:        name,
	(CFBundleIconFile:   "APPL") (*) bool icon,
	CFBundlePackageType: 'APPL',
	CFBundleSignature:   creator,
	CFBundleVersion:     "for Advanced Mac Substitute",
	CFBundleGetInfoString: "(using the " frontend " front end)",
	NSHighResolutionCapable: true,
	
	doctypes,
]

def printer (depth, text)
{
	let Tab = "\t"
	
	let tabs = Tab * depth
	
	plist_xml_lines <-- tabs text
}

render_xml( printer, info_plist.convert info )

let plist = "\n".join( *plist_xml_lines, "" )

rewrite contents "/Info.plist" <== plist

run [ "fndr-sync", new_app_dir ]
