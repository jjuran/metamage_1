#!/usr/bin/env vx -Z

const bindir = dirname realpath argv[ 0 ]

const amsdir = bindir "/../share/ams/"

const ams_bin = getenv "AMS_BIN" or amsdir "/bin"
const ams_lib = getenv "AMS_LIB" or amsdir "/lib"
const ams_mnt = getenv "AMS_MNT" or amsdir "/mnt"

const title = "Advanced Mac Substitute"

const model = getenv "AMS_CPU"                # may be ()
const model_opt = if model then {"-M" model}  # may be ()

const mem = getenv "AMS_MEM"
const mem_opt = if mem then
{
	# 128K, 512K, 1 MiB, 2 MiB, 2.5 MiB, 4 MiB
	assert int mem in [ 0, 1, 2, 4, 5, 8 ]
	
	"--mem=" mem,
}

const screen_res = getenv "AMS_SCREENRES" or "512x342"

const default_app = "Welcome"

const app_name =
	if argc > 1
		then {argv[ 1 ]}
	else if const ams_appname = getenv "AMS_APPNAME"
		then {ams_appname}
	else {default_app}

def exists (path)
{
	return try {stat path; true} catch {false}
}

def which (program)
{
	return
	try
	{
		output-from-run [ "which", program ],
	}
	catch {}
}

const home     = getenv "HOME"
const home_68k = home "/68k"

const root_dir = if exists home_68k then {home_68k} else {ams_mnt}

const resfiles = [ "AMS Resources", "System" ]
const respaths = resfiles map { root_dir "/" v } ver { exists v "/r" }

if exists bindir "/mkrsrc.vx" then
{
	const output = "-o", root_dir "/AMS Resources/rsrc"
	
	run [ "minivx", "-Z", bindir "/mkrsrc.vx", output, *respaths ]
}

def freemountd_rw (root) { "freemountd -qu --rw --root" / ' ', root, "//" }

const freemountd-server = "freemountd -qu --root" / ' ', root_dir, "//"

const xv68k = "xv68k"

def module_path (name)
{
	return ams_lib "/" name
}

# Reserve fds 6 and 7
dup2(ERR, 6)
dup2(ERR, 7)

const events_fd_slot = reader "/dev/null"
const events_fd_opt  = "--events-fd=" events_fd_slot

var sound-fd
var sound-server = ()

def get_sound_fd
{
	if const sound_fd = getenv "AMS_SOUND_FD" then
	{
		return sound_fd
	}
	
	if which "sndtrack" then
	{
		const sound_fd_slot = str (sound-fd = reader "/dev/null")
		sound-server = "--fd", sound_fd_slot, "sndtrack", "//"
		
		return sound_fd_slot
	}
	
	return ()
}

var modem-fd
var modem-server = ()

def get_modem_fd
{
	if const modem = getenv "AMS_MODEM" then
	{
		const host, const port = modem / ':'
		
		const command = "tcpclient", host, port, "duplex", "6-1", "0-7"
		
		const modem_fd_slot = str (modem-fd = reader "/dev/null")
		modem-server = "--fd", modem_fd_slot, command, "//"
		
		return modem_fd_slot
	}
	
	return ()
}

var appfs-fd
var appfs-server = ()

def get_appfs_fd
{
	var appfs = getenv "AMS_APPFS" or return ()
	
	if appfs == "-" then
	{
		const osx_prefs = home "/Library/Preferences"
		const ams_prefs = if exists osx_prefs
		then { osx_prefs "/Advanced Mac Substitute" }
		else { home "/.advanced-mac-substitute" }
		
		appfs = ams_prefs "/" app_name
		
		if not exists appfs then
		{
			run [ "mkdir -p" / ' ', appfs ]
		}
	}
	
	const fd_slot = str (appfs-fd = reader "/dev/null")
	appfs-server = "--fd", fd_slot, freemountd_rw appfs
	
	return fd_slot
}

var docfs-fd
var docfs-server = ()

def get_docfs_fd
{
	var docfs = getenv "AMS_DOCFS" or return ()
	
	if docfs == "-" then
	{
		const osx_docs = home "/Documents"
		const ams_docs = if exists osx_docs
		then { osx_docs "/Advanced Mac Substitute" }
		else { home "/.advanced-mac-substitute/documents" }
		
		docfs = ams_docs "/" app_name
		
		if not exists docfs then
		{
			run [ "mkdir -p" / ' ', docfs ]
		}
	}
	
	const fd_slot = str (docfs-fd = reader "/dev/null")
	docfs-server = "--fd", fd_slot, freemountd_rw docfs
	
	return fd_slot
}

def core_opts
{
	var opts = [ events_fd_opt ]
	
	if const auto_clear = getenv "AMS_AUTOCLEAR" then
	{
		opts <-- "-0"
	}
	
	if const auto_vsync = getenv "AMS_AUTOVSYNC" then
	{
		opts <-- "-Y"
	}
	
	if const gne_ticks = getenv "AMS_GNETICKS" then
	{
		opts <-- "-G" gne_ticks
	}
	
	if const romgen = getenv "AMS_ROMGEN" then
	{
		opts <-- "-R" romgen
	}
	
	if const system = getenv "AMS_SYSTEM" then
	{
		opts <-- "-V" system
	}
	
	return ams-core: opts
}

def io_opts
{
	const sound = if const sound_fd = get_sound_fd() then
	{
		setenv( "XV68K_SOUND_FD", sound_fd )
		
		"--sound-fd=" sound_fd,
	}
	
	const modem = if const modem_fd = get_modem_fd() then
	{
		"--modem-fd=" modem_fd,
	}
	
	const opts = [ sound, modem ]
	
	return
	if opts then
	{
		ams-io: opts,
	}
}

def auto_mbin_disk
{
	const path = root_dir "/" app_name
	
	return if exists path then {}
	else if exists path ".mbin" then
	{
		app_name ".mbin",
	}
	else if exists path ".mbim" then
	{
		app_name ".mbim",
	}
}

def fs_opts
{
	const disk_opt =
	if const disk = getenv "AMS_DISK" or auto_mbin_disk() then
	{
		"--disk", disk,
	}
	
	const appfs_opt =
	if const appfs_fd = get_appfs_fd() then
	{
		"--appfs-fd", appfs_fd,
	}
	
	const docfs_opt =
	if const docfs_fd = get_docfs_fd() then
	{
		"--docfs-fd", docfs_fd,
	}
	
	const opts = disk_opt, appfs_opt, docfs_opt
	
	return
	if opts then
	{
		ams-fs: [ opts ],
	}
}

def seg_opts
{
	const open_opt =
	if const open = getenv "AMS_OPEN" then
	{
		assert open[ 4 ] == ':'
		
		"--type", open[ 0 -> 4], "--open", substr( open, 5 ),
	}
	
	const opts = [ open_opt ]
	
	return
	if opts then
	{
		ams-seg: opts,
	}
}

const module_args = str^
[
	core_opts(),
	fs_opts(),
	io_opts(),
	seg_opts(),
	
	# This setting is not recommended, which is why no logic enables it.
	#vdb: [ "--continue-on-bus-error" ],
]

def argify (name)
{
	const path = module_path name
	
	return
		if name in module_args
			then {"[", path, *module_args[ name ], "]"}
			else {path}
}

const prefix_list = "core io fs snd rsrc pack seg qd ui print"
var   ams_modules = [ prefix_list / ' ' ] map {"ams-" v}

ams_modules <-- "vdb"
ams_modules <-- "umsp"

const module_opts = ams_modules map {"-m", argify v}

const app = ams_bin "/app"

const home_run = home "/run"

run [ "mkdir -p" / ' ', home_run ]

const screen = home_run "/ams.skif"
const raster = "--raster=" screen

run [ "skif make -fg " screen_res "*1 -c2 -m paint -R" / ' ', screen ]

run [ "skif init" / ' ', screen ]

const zoom = "-x" (getenv "AMS_ZOOM" or 1)
const screen_opt     = raster
const command-prefix = "exhibit", "-t", title, raster, events_fd_opt, zoom

const file-servers = freemountd-server, appfs-server, docfs-server
const servers = sound-server, modem-server, file-servers

const xv68k_opts = model_opt, mem_opt, "-tSP"

const xv68k-subcmd = xv68k, xv68k_opts, screen_opt, *module_opts, app, app_name
const graft-subcmd = "graft", servers, xv68k-subcmd

const command = [ command-prefix, graft-subcmd ]

execvp (command[ 0 ], command)
