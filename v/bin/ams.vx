#!/usr/bin/env minivx

let bindir = dirname realpath argv[ 0 ]

def existing (path)
{
	return try {stat path; path} catch {}
}

let exists = existing

let amsdir = getenv "AMS_ROOT" or existing bindir "/../share/ams/"
                               or existing bindir "/../../../ams-68k-bin"
                               or throw "AMS_ROOT not set; can't find AMS files"

let ams_bin = getenv "AMS_BIN" or amsdir "/bin"
let ams_lib = getenv "AMS_LIB" or amsdir "/lib"
let ams_mnt = getenv "AMS_MNT" or amsdir "/mnt"

let title = "Advanced Mac Substitute"

var disks = []

var live_modal = false

var xv = null
var bpp = 1
var cpu = null
var mem = null
var modem = null
var app_name = null
var coloring = 0
var recording = null
var screen_res = null
var has_cursor = bool getenv "AMS_CURSOR"
var shutoff_ticks = 0
var startup_ticks = 0
var welcome_ticks = 0

var args = begin argv

++args

var arg = null

while args do
{
	arg = *args++
	
	if substr (arg, 0, 2) == "--" then
	{
		if arg == "--" then
		{
			arg = if args then { *args++ }
			
			break
		}
		else if arg == "--bpp" then
		{
			bpp = int *args++
		}
		else if arg == "--color" then
		{
			coloring = 1
		}
		else if arg == "--cpu" then
		{
			cpu = *args++
		}
		else if arg == "--disk" then
		{
			disks <-- *args++
		}
		else if arg in ["--hardware-cursor", "--hwcursor"] then
		{
			has_cursor = true
		}
		else if arg == "--live-modal" then
		{
			live_modal = true
		}
		else if arg == "--mem" then
		{
			mem = *args++
		}
		else if arg == "--modem" then
		{
			modem = *args++
		}
		else if arg in ["--rec", "--record"] then
		{
			recording = *args++
		}
		else if arg == "--res" then
		{
			screen_res = *args++
		}
		else if arg in ["--shutdown-delay", "--shutdown"] then
		{
			shutoff_ticks = int *args++
		}
		else if arg in ["--startup-delay", "--startup"] then
		{
			startup_ticks = int *args++
		}
		else if arg in ["--welcome-delay", "--welcome"] then
		{
			welcome_ticks = int *args++
		}
		else if arg == "--xv" then
		{
			xv = *args++
		}
		else
		{
			warn "ams.vx: Unrecognized option: " arg
			
			exit 50
		}
	}
	else
	{
		break
	}
}

if arg then
{
	app_name = arg
}

if args then
{
	warn "ams.vx: Ignoring extra arguments"
}

let model = cpu or getenv "AMS_CPU"         # may be ()
let model_opt = if model then {"-M" model}  # may be ()

mem = mem or getenv "AMS_MEM"

let mem_opt = if mem then
{
	# 128K, 512K, 1 MiB, 2 MiB, 2.5 MiB, 4 MiB
	assert int mem in [ 0, 1, 2, 4, 5, 8 ]
	
	"--mem=" mem,
}

let rec_opt = if recording then {"--record", recording}

screen_res = screen_res or getenv "AMS_SCREENRES" or "512x342"

let default_app = "Welcome"

if app_name isa null then
{
	app_name =
	if let ams_appname = getenv "AMS_APPNAME"
		then {ams_appname}
	else {default_app}
}

def which (program)
{
	return
	try
	{
		output-from-run [ "which", program ],
	}
	catch {}
}

let runnable = which

let home     = getenv "HOME"

let root_dir = existing home "/68k" or ams_mnt

let resfiles = [ "AMS Resources", "System" ]
let respaths = resfiles map { root_dir "/" v } ver { exists v "/r" }

if exists bindir "/mkrsrc.vx" then
{
	let output = "-o", root_dir "/AMS Resources/rsrc"
	
	run [ "minivx", bindir "/mkrsrc.vx", output, *respaths ]
}

def freemountd_rw (root) { "freemountd -qu --rw --root" / ' ', root, "//" }

let freemountd-server = "freemountd -qu --root" / ' ', root_dir, "//"

let xv68k = "xv68k"

def module_path (name)
{
	return ams_lib "/" name
}

# Reserve fds 6 and 7
dup2(ERR, 6)
dup2(ERR, 7)

var opened_fds = []

def alloc_fd ()
{
	let fd = reader "/dev/null"
	
	opened_fds <-- fd
	
	return str fd
}

let events_fd_opt = "--events-fd=" alloc_fd()

var sound-server = ()

def get_sound_fd
{
	if let sound_fd = getenv "AMS_SOUND_FD" then
	{
		return sound_fd
	}
	
	if runnable "sndtrack" then
	{
		let sound_fd_slot = alloc_fd()
		
		sound-server = "--fd", sound_fd_slot, "sndtrack", "//"
		
		return sound_fd_slot
	}
	
	return ()
}

var modem-server = ()

def get_modem_fd
{
	if modem = modem or getenv "AMS_MODEM" then
	{
		let required = ["tcpclient", "duplex"]
		
		if let lacking = required ver { not runnable v } per {a " and " b} then
		{
			warn "ams.vx: TCP modem requires " lacking "; disabling"
			
			return ()
		}
		
		let (host, port) = modem / ':'
		
		let command = "tcpclient", host, port, "duplex", "6-1", "0-7"
		
		let modem_fd_slot = alloc_fd()
		modem-server = "--fd", modem_fd_slot, command, "//"
		
		return modem_fd_slot
	}
	
	return ()
}

def make_shared_dir_server (param, mac_subpath, alt_subpath )
{
	var path = param or return ()
	
	if not '/' in path then
	{
		if path == "-" then
		{
			path = app_name
		}
		
		let mac_path = home "/" mac_subpath
		let dir_path = if exists mac_path
		then { mac_path "/Advanced Mac Substitute" }
		else { home "/.advanced-mac-substitute/" alt_subpath }
		
		path = dir_path "/" path
		
		if not exists path then
		{
			run [ "mkdir -p" / ' ', path ]
		}
	}
	
	let fd_slot = alloc_fd()
	
	return "--fd", fd_slot, freemountd_rw path
}

let appfs-server = make_shared_dir_server (str getenv "AMS_APPFS",
                                           "Library/Preferences",
                                           "preferences")

let docfs-server = make_shared_dir_server (str getenv "AMS_DOCFS",
                                           "Documents",
                                           "documents")

let prefs-server = make_shared_dir_server (str getenv "AMS_PREFS",
                                           "Library/Preferences",
                                           "preferences")

let appfs_opt = if appfs-server then { "--appfs-fd", [appfs-server][ 1 ] }
let docfs_opt = if docfs-server then { "--docfs-fd", [docfs-server][ 1 ] }
let prefs_opt = if prefs-server then { "--prefs-fd", [prefs-server][ 1 ] }

def core_opts
{
	var opts = [ events_fd_opt ]
	
	if let auto_clear = getenv "AMS_AUTOCLEAR" then
	{
		opts <-- "-0"
	}
	
	if let auto_vsync = getenv "AMS_AUTOVSYNC" then
	{
		opts <-- "-Y"
	}
	
	if let gne_ticks = getenv "AMS_GNETICKS" then
	{
		opts <-- "-G" gne_ticks
	}
	
	if let romgen = getenv "AMS_ROMGEN" then
	{
		opts <-- "-R" romgen
	}
	
	if let system = getenv "AMS_SYSTEM" then
	{
		opts <-- "-V" system
	}
	
	return ams-core: opts
}

let sound_opt = if let sound_fd = get_sound_fd() then
{
	"--sound-fd=" sound_fd,
}

def io_opts
{
	let modem = if let modem_fd = get_modem_fd() then
	{
		"--modem-fd=" modem_fd,
	}
	
	let opts = [ modem ]
	
	return
	if opts then
	{
		ams-io: opts,
	}
}

let extensions = [ ".mbin", ".mbim" ]

def auto_mbin_disk (app_name)
{
	let path = root_dir "/" app_name
	
	if not exists path then
	{
		for ext in extensions do
		{
			if exists path ext then
			{
				return app_name ext
			}
		}
	}
	
	return ()
}

def drop (x)
{
	return lambda (s) { string (s / x) }
}

def repl (x)
{
	return lambda (s) { translated (s, x / 2) }
}

let mutations =
[
	drop '\'',
	drop "\u2019",  # typographer's apostrophe / closing single quote
	drop '.',
	repl " -",
	repl str ('A' .. 'Z', 'a' .. 'z'),
]

def auto_disk_name
{
	var disk_name
	
	if disk_name = auto_mbin_disk app_name then
	{
		return disk_name
	}
	
	let name = mutations per app_name>-{ v L }
	
	if name != app_name and (disk_name = auto_mbin_disk name) then
	{
		return disk_name
	}
	
	return ()
}

def fs_opts
{
	if not disks then
	{
		if let disk = getenv "AMS_DISK" or auto_disk_name() then
		{
			disks = [disk]
		}
	}
	
	let disk_opts = disks map
	{
		"--disk", v,
	}
	
	let opts = *disk_opts, appfs_opt, docfs_opt, prefs_opt
	
	return
	if opts then
	{
		ams-fs: [ opts ],
	}
}

def seg_opts
{
	let open_opt =
	if let open = getenv "AMS_OPEN" then
	{
		assert open[ 4 ] == ':'
		
		"--type", open[ 0 -> 4], "--open", substr( open, 5 ),
	}
	
	let opts = [ open_opt ]
	
	return
	if opts then
	{
		ams-seg: opts,
	}
}

def ui_opts
{
	let debug_updates = false
	
	let opts =
	[
		"--debug-updates" (*) debug_updates,
		"--live-modal"    (*) live_modal,
	]
	
	return
	if opts then
	{
		ams-ui: opts,
	}
}

let module_args = str^
[
	core_opts(),
	fs_opts(),
	io_opts(),
	seg_opts(),
	ui_opts(),
	
	# This setting is not recommended, which is why no logic enables it.
	#vdb: [ "--continue-on-bus-error" ],
]

def argify (name)
{
	let path = module_path name
	
	return
		if name in module_args
			then {"[", path, *module_args[ name ], "]"}
			else {path}
}

let prefix_list = "core io fs snd rsrc drvr pack seg qd ui dsat print"
var ams_modules = [ prefix_list / ' ' ] map {"ams-" v}

ams_modules <-- "vdb"
ams_modules <-- "umsp"

let module_opts = ams_modules map {"-m", argify v}

let app = ams_bin "/app"

let startup = ("--startup="  startup_ticks) (*) bool startup_ticks
let welcome = ("--welcome="  welcome_ticks) (*) bool welcome_ticks
let shutoff = ("--shutdown=" shutoff_ticks) (*) bool shutoff_ticks
let app_opts = startup, welcome, shutoff, app_name

let works = home "/run/" getpid() ".works"

run [ "mkdir -p" / ' ', works ]

let update = works "/update-signal.fifo"
let events = works "/events.fifo"
let screen = works "/screen.skif"
let cursor = works "/cursor.skif"

let crsr_opt = "--cursor=" cursor (*) has_cursor
let ev_opt = "--events-fifo=" events
let raster = "--raster=" screen
let xv_opt = "--xv=" xv (*) bool xv

run [ "mkfifo", update ]

if bpp > 8 then
{
	coloring = 2
}

let raster_model = ["paint", "palette", "xRGB"][ coloring ]

run [ "skif make -fg " screen_res "*" bpp " -c2 -R -m" / ' ', raster_model, screen ]

if has_cursor then
{
	setenv( "DISPLAY_CURSOR", cursor )
	
	run [ "skif make -fg 16x16*1 -c3 -m paint" / ' ', cursor ]
}

let zoom = "-x" (getenv "AMS_ZOOM" or 1)
let event_input = events_fd_opt, ev_opt
let command-prefix = "exhibit", "-t", title, raster, event_input, zoom

let file-servers = freemountd-server, appfs-server, docfs-server, prefs-server
let servers = sound-server, modem-server, file-servers

let xv68k_opts = model_opt, mem_opt, sound_opt, rec_opt, "-tSP", crsr_opt, xv_opt

let xv68k-subcmd = xv68k, xv68k_opts, raster, *module_opts, app, app_opts
let graft-subcmd = "graft", servers, xv68k-subcmd

let command = [ command-prefix, graft-subcmd ]

if has_cursor then
{
	warn "cursor: " cursor
}

warn "screen: " screen
warn "events: " events
warn "update: " update

setenv( "GRAPHICS_UPDATE_SIGNAL_FIFO", update )

let SIGINT = 2

signal-ignore SIGINT

run command

# We need to "unlock" the FIFO (by opening it O_RDONLY | O_NONBLOCK)
# one last time in case vnc-interact is blocked trying to open it.
# Then we delete the FIFO so it can't be opened again.

# In order to avoid a race condition, we actually rename the FIFO first.
# Unlocking the renamed FIFO unblocks vnc-interact's open() call, and if
# it manages to call open() again before we call remove(), the open() will
# fail nonetheless because the FIFO was already renamed.

let update2 = update "2"

rename( update, update2 )

try
{
	# This will throw an exception because load() doesn't work on FIFOs,
	# but it does open it O_RDONLY|O_NONBLOCK first, which is all we need.
	
	load update2
}
catch {}

remove update2
remove events
remove screen

if has_cursor then
{
	remove cursor
}

remove works

end.
