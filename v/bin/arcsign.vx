#!/usr/bin/env vx -Z

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../lib/v/"

def import (lib) { eval (load, realpath) libdir lib ".vobj" }

let options = import "options"
let arcsign = import "arcsign"

let date-time = try { import "date-time" } catch {}

let stamp = if date-time then {{ date-time.stamp time() }} else { null }

let command_defs = str^
[
	seal:   [load, append],
	unseal: [load, truncate],
]

def usage
{
	ERR <== "Usage: arcsign <command> <args> ...\n"
	        "       arcsign seal -k <key-file> <msg-file> ...\n"
	        "       arcsign unseal -K <key-hex> <msg-file> ...\n"
	        "       arcsign verify <msg-file> ...\n"
	
	return 2
}

if argc < 3 then
{
	exit usage()
}

let command = argv[ 1 ]

if not command in command_defs then
{
	exit usage()
}

def check_hash
{
	if not _ in arcsign.hash_functions then
	{
		warn "arcsign: " _ ": not a valid hash function"
		exit 2
	}
	
	return _
}

let vload = { packed self-destructing load _ }

var hash = null
var key  = null

let option_defs = byte^
[
	'h': [ &hash, check_hash ],
	'K': [ &key, unhex ],
	'k': [ &key, vload ],
]

let args = options.parse( argv[ 1 -> argc ], option_defs, { exit usage() } )

if key isa null then
{
	warn "arcsign: a key is required"
	exit 2
}

let cmd = command_defs[ command ]

let kits = args map { let x = v; x => cmd map { v % x } }

let params = str^[ :kits, :key, :hash, :stamp ]

let handler = import "arcsign-" command

let results = handler( arcsign, params )

var exit_status = 0

for r in results do
{
	let v = r.value
	
	if v.length > 1 then
	{
		warn "arcsign: " r.key (": ") v[ 1 ]
		
		exit_status = 1
	}
}

exit exit_status
