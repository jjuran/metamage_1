#!/usr/bin/env vx -Z

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../lib/"

const import = { const path = libdir _ ".vobj"; eval( load path, path ) }

def status_from
{
	const command (str) = _
	
	const err = dup ERR
	
	const r, const w = pipe()
	
	dup2( w, ERR ); close w
	
	const exit_status = try { system command } catch { _.exit }
	
	dup2( err, ERR ); close err
	
	close r
	
	return exit_status
}

const begins_with    = import "begins_with"
const get_until_char = import "get_until_char"

const ifconfig_version_status = status_from( "/sbin/ifconfig --version" )

var ifconfig-path = "/sbin/ifconfig"

if ifconfig_version_status == 127 then
{
	ifconfig-path = "ifconfig"  # for Android
}

const platform_from_exit = int^
[
	0: "net-tools",
	1: "bsd",
	4: "linux",
	127: "linux"
]

const ifconfig_platform = platform_from_exit[ ifconfig_version_status ]

const ifconfig = import "ifconfig." ifconfig_platform

const get_intf_name = get_until_char % ifconfig.intf_name_suffix
const get_ipv4_addr = get_until_char % ' '

const inet = ifconfig.inet_addr_prefix

const pad_char = inet[ 0 ]

var results = []

var interface

for line in output-from-run( [ifconfig-path] ).lines() do
{
	if line == "" then {continue}
	
	if line[ 0 ] != pad_char then
	{
		interface = get_intf_name( line )
	}
	else if begins_with( line, inet ) then
	{
		const ipv4 = get_ipv4_addr( substr( line, inet.length ) )
		
		results <-- interface ": " ipv4
	}
}

print "\n".join *(Iter.sorted results)
