#!/usr/bin/env minivx -Z

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../lib/v/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let info_plist = import "info_plist"
let render_xml = import "render_xml"

let Tab = "\t"

let info_txt = argv[ 1 ]
let info_dir = dirname info_txt

let info-txt = load info_txt

var Build-origin-path = info_dir "/Build-origin.txt"

try
{
	stat Build-origin-path
}
catch
{
	Build-origin-path = null
}

var more-txt = ""

if Build-origin-path then
{
	let build-origin = hex unhex *(load Build-origin-path).lines()
	
	chdir info_dir
	
	let command = [ "git", "rev-list", build-origin "..HEAD", "--count" ]
	
	try
	{
		let build-number = output-from-run command
		
		more-txt = "CFBundleVersion: " (rep *build-number.lines()) "\n"
	}
	catch ( ... )
	{
	}
}

def comma-terminated { if _[ _.length - 1 ] in ":[" then { _ } else { _ "," } }

let lines = (info-txt more-txt).lines() ver bool map comma-terminated

let info = eval( "[" join( "\n", *lines, "]" ), realpath info_txt )

let plist = info_plist.convert info

print info_plist.version
print info_plist.doctype

def printer (depth, text)
{
	let tabs = Tab * depth
	
	print tabs text
}

render_xml( printer, plist )
