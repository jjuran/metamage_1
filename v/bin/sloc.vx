#!/usr/bin/env lvx

# Counts the Significant Lines Of Code in a file or tree of files.

let blacklist (str[]) =
[
	".git",
	"var",
]

let trivial (str[]) =
[
	"{",
	"}",
	"[",
	"]",
	"];",
	"/*",
	"*/",
]

let significant_char = ~('\0' .. ' ')

def is_significant_line (line)
{
	var p = (begin line).find significant_char
	
	return p and *p != '#' and not p.rest in trivial
}

def count_sloc (code)
{
	return code.lines() map int * is_significant_line per Math.sum or 0
}

def dispatch (path)
{
	const list (str[])
	
	let st = try {lstat path} catch {}
	
	let mode = str( [st] map {v["type"]} )
	
	if mode == "DIR" and (list = try {listdir path} catch {[]}) then
	{
		var total = 0
		
		for d in (list ver {not v in blacklist}) do
		{
			total += dispatch path "/" d
		}
		
		print path ": " total
		
		return total
	}
	
	if mode == "REG" then
	{
		try
		{
			let sloc = count_sloc load path
			
			print path ": " sloc
			
			return sloc
		}
		catch {}
	}
	
	return 0
}

for i in 1 -> argc do
{
	dispatch argv[ i ]
}
