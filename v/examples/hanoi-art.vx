#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let board = import "hanoi/board"
let logic = import "hanoi/logic"
let scene = import "hanoi/scene"

var depth = 4

var p = begin argv

while ++p do
{
	let arg = *p
	
	depth = int arg
}

let simulator = board.make  depth
let rendering = scene.make( depth, simulator.get )

let ESC = "\x1b"
let CSI = ESC "["

let CLEAN = CSI "H" CSI "J"  # home, clear to end

def send (rows)
{
	OUT <== CLEAN
	
	put "\n".join *rows
}

def display
{
	rendering( send, null )
}

def visual-move (n, src, dst)
{
	sleep 0.3
	
	#simulator.move _
	
	simulator.remove( n, src )
	
	rendering( {sleep 0.2} * send, [_] )
	
	simulator.insert( n, dst )
	
	rendering( send, null )
}

display()

let move-tower = logic.make-tower-mover visual-move

move-tower( depth, 0, 2 )

end.
