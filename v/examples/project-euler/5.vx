#!/usr/bin/env minivx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let nth_prime = import "nth_prime"

def prime_factorization (product)
{
	var result = []
	
	var i = 0
	
	while product > 1 do
	{
		let factor = nth_prime( i++ )
		
		var n = 0
		
		while product % factor == 0 do
		{
			product /= factor
		
			++n
		}
		
		if n then
		{
			result <-- factor => n
		}
	}
	
	return result
}

def merge_maps (maps)
{
	var result = int^[]
	
	for map in maps do
	{
		for m in map do
		{
			let k = m.key
			
			if not k in result  or  m.value > result[ k ] then
			{
				result[ k ] = m.value
			}
		}
	}
	
	return result
}

def lcm (operands)
{
	let pf = merge_maps( operands map prime_factorization )
	
	let factors = pf map { v.key ^ v.value }
	
	return Math.product *factors
}

print lcm (1 .. 20)
