#!/usr/bin/env lvx

let units = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]

let teens = ["ten", "eleven", "twelve", "thirteen", "", "fifteen", "", "", "eighteen", ""]

let ten_x = ["", "", "twenty", "thirty", "forty", "fifty", "", "", "eighty", ""]

let powers = ["", "thousand", "million", "billion", "trillion"]

def English (x)
{
	if x < 10 then
	{
		return units[ x ]
	}
	
	if x < 20 then
	{
		return teens[ x - 10 ] or units[ x - 10 ] "teen"
	}
	
	if x < 100 then
	{
		let k = x mod 10
		
		let ones = if k then {"-" units[ k ]} else {""}
		
		let tens = ten_x[ x div 10 ] or units[ x div 10 ] "ty"
		
		return tens ones
	}
	
	if x < 1000 then
	{
		let cents = x mod 100
		
		let tens_ones = if cents then {" " English cents} else {""}
		
		let hundreds = English( x div 100 ) " hundred"
		
		return hundreds tens_ones
	}
	
	var power = 1
	var next  = 1000
	
	for i in 1 -> powers.length do
	{
		power = next
		next *= 1000
		
		if x < next then
		{
			let major = x div power
			let minor = x mod power
			
			let majority = English( major ) " " powers[ i ]
			
			if minor == 0 then
			{
				return majority
			}
			
			let separator = if minor > 99 then {", "} else {" "}
			
			let minority = English minor
			
			return majority separator minority
		}
	}
	
	return "many"
}

def english-number (x)
{
	if x < 0 then
	{
		return "negative " english-number( -x )
	}
	
	if x in 100 -> 10000 and x div 100 mod 10 != 0 then
	{
		let cents = x mod 100
		
		let tens_ones = if cents then {" " English cents} else {""}
		
		let hundreds = English( x div 100 ) " hundred"
		
		return hundreds tens_ones
	}
	
	return English x
}

for x in argv[ 1 -> argv.length ] do
{
	print english-number int x
}
